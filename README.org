#+setupfile: ~/.org-mode-goodies/setup.org

* Useful
** compile buffers
#+begin_src elisp :results silent
(roy/compile-and-rename "install")
(roy/compile-and-rename "lint")
(roy/compile-and-rename "test")
(roy/compile-and-rename "dev")
#+end_src

* Python Project Starter Template

A modern Python project template with best practices: =uv= for dependency management, =pytest= for
testing, =ruff= for linting, and a clean src/tests layout.

* Quickstart

#+BEGIN_SRC shell
  git clone <repo-url> cd PythonProject.Template.1 make install make lint make test make run
#+END_SRC

* Project Structure

#+BEGIN_EXAMPLE
PythonProject.Template.1/
├── .gitignore
├── Makefile
├── pyproject.toml
├── README.md
├── src/
│   └── example.py
└── tests/
    └── test_example.py
#+END_EXAMPLE

* Usage
- =make install= — Install dependencies
- =make lint= — Lint code with ruff
- =make test= — Run tests with pytest
- =make run= — Run the example script
- =make clean= — Clean up cache and auto-fix lint
* Requirements
- Python 3.8+
- [[https://github.com/astral-sh/uv][uv]] (for fast dependency management)

* Example
See =src/example.py= and =tests/test_example.py= for a minimal math function and its test.

* Understanding the 'src' Layout

This project uses a =src= layout, a modern best practice for structuring Python projects. The
configuration for this is in =pyproject.toml=:

#+BEGIN_SRC toml
  [tool.setuptools.packages.find] where = ["src"]
#+END_SRC

Here’s what this means for development:

- *Packaging*: It tells the build system to find all your Python packages inside the =src/=
  directory. This ensures a clean separation between your source code and other project files (like
  tests and documentation).

- *Imports*: Because the code is in =src/=, the project must be installed in "editable mode" for imports
  to work correctly during development. The =make install= command handles this for you by running =uv
  pip install -e .=.

- *Consistency*: This setup guarantees that the code you run and test is the same code that gets
  packaged for distribution, preventing many common import-related bugs.
